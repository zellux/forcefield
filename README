TODO
* 浮点支持

* 依赖包
simplejson
python-antlr

* 编码规范
输入输出：统一使用UTF-8
内存存储：使用unicode对象
原因：ANTLR生成的代码使用了unicode对象，为了尽可能的减少修改，在存储时使用unicode对象

* 脚本调用流程
1. 用户访问URL
2. Web服务器获得请求，执行相应的脚本
   a. GET方法的参数通过命令行参数传递
   b. 为了避免引号、空格等问题，参数通过BASE64加码传递
3. 脚本解析命令行参数，并用BASE64解码获得GET方法的参数
4. GET方法的参数由unicode方法转换成unicode字符集表示
5. 脚本执行结果输出到stdout
6. Web服务器获得脚本的标准输出，返回给用户

* FieldForce语法及实现
** 解析模块
Scope类
记录代码块的变量、作用域

** 变量作用域
类似Python，for/while等语句不会创建新的作用域（和外层共享），函数调用会创建新的作用域，但仍能访问外层作用域的变量

但和Python不同的是，Python中函数对外层作用域的访问是只读的，例如这个程序是非法的：
def f():
    x += 1

x = 0
f()

在ForceField语言中，拥有类似语义的这个程序则是被允许的：
FUNC F()
     SET x = x + 1
     RETURN x
END

SET x = 0
CALL F()
RETURN x

** 远程调用
*** 分布式服务器配置
server.conf文件中记录了服务器名及其URL起始地址，格式为
服务器名, URL起始地址
例如
server1, http://127.0.0.1:12345/

*** 远程函数声明语法
为了区别本地函数，ForceField中的远程函数需要使用REMOTE关键字来区分，声明语法为
REMOTE @服务器名 函数名 函数行参
以ADD函数为例：
REMOTE @server1 ADD(x, y)

* 回归测试
** ASSERT命令
新增了ASSERT命令用于检查某个变量的值，当表达式不满足时，程序显示错误，并立即退出

** 测试文件
所有的回归文件的命名方式统一为scripts/*_test.input，它们通常都包含一个或多个ASSERT命令，在程序运行的不同环节检查程序是否被正确执行。

在ForceField项目根目录执行python regression.py即可运行所有的测试程序。

** 回归测试举例
以下我们以一些具有代表性的回归测试为例，介绍这个语言的特点：

*** 基本计算功能测试
四则运算、括号等测试

*** 函数递归测试 scripts/function_test.input
这个程序主要包含三个测试：一个递归数列(Fibonacci)测试，一个递归阶乘函数测试，以及一个函数作用域测试。


* 关键字
SET
FUNC
ASSERT
CALL
IF
FOR
WHILE
RETURN

* 在线调试
